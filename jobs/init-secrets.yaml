apiVersion: batch/v1
kind: Job
metadata:
  name: init-secrets
  namespace: default
  labels:
    app: init-secrets
    component: security
spec:
  template:
    metadata:
      labels:
        app: init-secrets
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-secrets
        image: bitnami/kubectl:1.28
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Starting secrets initialization..."
          
          # Create application secrets
          kubectl create secret generic app-secrets \
            --from-literal=jwt-secret="$(openssl rand -base64 32)" \
            --from-literal=encryption-key="$(openssl rand -base64 32)" \
            --from-literal=api-key="$(openssl rand -hex 16)" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create database connection secrets
          kubectl create secret generic db-secrets \
            --from-literal=mongodb-uri="mongodb://appuser:mongodb-app-password@mongodb:27017/101genai" \
            --from-literal=postgres-uri="postgresql://keycloak:keycloak-password@postgresql:5432/keycloak" \
            --from-literal=redis-uri="redis://:redis-password@redis-master:6379" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create external service secrets (placeholders)
          kubectl create secret generic external-secrets \
            --from-literal=openai-api-key="your-openai-api-key-here" \
            --from-literal=smtp-password="your-smtp-password-here" \
            --from-literal=s3-access-key="your-s3-access-key-here" \
            --from-literal=s3-secret-key="your-s3-secret-key-here" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Secrets initialization completed successfully!"
          
          # List created secrets
          echo "Created secrets:"
          kubectl get secrets | grep -E "(app-secrets|db-secrets|external-secrets)"
      backoffLimit: 3
      serviceAccountName: secret-manager
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-manager
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: secret-manager
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager
  namespace: default
subjects:
- kind: ServiceAccount
  name: secret-manager
  namespace: default
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
